// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: synapsis/v1/service.proto

package synapsisv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SynapsisService_Ping_FullMethodName                  = "/synapsis.v1.SynapsisService/Ping"
	SynapsisService_CreateUser_FullMethodName            = "/synapsis.v1.SynapsisService/CreateUser"
	SynapsisService_CreateProductCategory_FullMethodName = "/synapsis.v1.SynapsisService/CreateProductCategory"
	SynapsisService_GetProductCategory_FullMethodName    = "/synapsis.v1.SynapsisService/GetProductCategory"
	SynapsisService_UpdateProductCategory_FullMethodName = "/synapsis.v1.SynapsisService/UpdateProductCategory"
	SynapsisService_DeleteProductCategory_FullMethodName = "/synapsis.v1.SynapsisService/DeleteProductCategory"
	SynapsisService_GetProductCategories_FullMethodName  = "/synapsis.v1.SynapsisService/GetProductCategories"
)

// SynapsisServiceClient is the client API for SynapsisService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SynapsisServiceClient interface {
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PingResponse, error)
	// Auth
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	// Product Category
	CreateProductCategory(ctx context.Context, in *CreateProductCategoryRequest, opts ...grpc.CallOption) (*CreateProductCategoryResponse, error)
	GetProductCategory(ctx context.Context, in *GetProductCategoryRequest, opts ...grpc.CallOption) (*GetProductCategoryResponse, error)
	UpdateProductCategory(ctx context.Context, in *UpdateProductCategoryRequest, opts ...grpc.CallOption) (*GetProductCategoryResponse, error)
	DeleteProductCategory(ctx context.Context, in *DeleteProductCategoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetProductCategories(ctx context.Context, in *GetProductCategoriesRequest, opts ...grpc.CallOption) (*GetProductCategoriesResponse, error)
}

type synapsisServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSynapsisServiceClient(cc grpc.ClientConnInterface) SynapsisServiceClient {
	return &synapsisServiceClient{cc}
}

func (c *synapsisServiceClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, SynapsisService_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synapsisServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, SynapsisService_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synapsisServiceClient) CreateProductCategory(ctx context.Context, in *CreateProductCategoryRequest, opts ...grpc.CallOption) (*CreateProductCategoryResponse, error) {
	out := new(CreateProductCategoryResponse)
	err := c.cc.Invoke(ctx, SynapsisService_CreateProductCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synapsisServiceClient) GetProductCategory(ctx context.Context, in *GetProductCategoryRequest, opts ...grpc.CallOption) (*GetProductCategoryResponse, error) {
	out := new(GetProductCategoryResponse)
	err := c.cc.Invoke(ctx, SynapsisService_GetProductCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synapsisServiceClient) UpdateProductCategory(ctx context.Context, in *UpdateProductCategoryRequest, opts ...grpc.CallOption) (*GetProductCategoryResponse, error) {
	out := new(GetProductCategoryResponse)
	err := c.cc.Invoke(ctx, SynapsisService_UpdateProductCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synapsisServiceClient) DeleteProductCategory(ctx context.Context, in *DeleteProductCategoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SynapsisService_DeleteProductCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synapsisServiceClient) GetProductCategories(ctx context.Context, in *GetProductCategoriesRequest, opts ...grpc.CallOption) (*GetProductCategoriesResponse, error) {
	out := new(GetProductCategoriesResponse)
	err := c.cc.Invoke(ctx, SynapsisService_GetProductCategories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SynapsisServiceServer is the server API for SynapsisService service.
// All implementations must embed UnimplementedSynapsisServiceServer
// for forward compatibility
type SynapsisServiceServer interface {
	Ping(context.Context, *emptypb.Empty) (*PingResponse, error)
	// Auth
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	// Product Category
	CreateProductCategory(context.Context, *CreateProductCategoryRequest) (*CreateProductCategoryResponse, error)
	GetProductCategory(context.Context, *GetProductCategoryRequest) (*GetProductCategoryResponse, error)
	UpdateProductCategory(context.Context, *UpdateProductCategoryRequest) (*GetProductCategoryResponse, error)
	DeleteProductCategory(context.Context, *DeleteProductCategoryRequest) (*emptypb.Empty, error)
	GetProductCategories(context.Context, *GetProductCategoriesRequest) (*GetProductCategoriesResponse, error)
	mustEmbedUnimplementedSynapsisServiceServer()
}

// UnimplementedSynapsisServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSynapsisServiceServer struct {
}

func (UnimplementedSynapsisServiceServer) Ping(context.Context, *emptypb.Empty) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedSynapsisServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedSynapsisServiceServer) CreateProductCategory(context.Context, *CreateProductCategoryRequest) (*CreateProductCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProductCategory not implemented")
}
func (UnimplementedSynapsisServiceServer) GetProductCategory(context.Context, *GetProductCategoryRequest) (*GetProductCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductCategory not implemented")
}
func (UnimplementedSynapsisServiceServer) UpdateProductCategory(context.Context, *UpdateProductCategoryRequest) (*GetProductCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductCategory not implemented")
}
func (UnimplementedSynapsisServiceServer) DeleteProductCategory(context.Context, *DeleteProductCategoryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductCategory not implemented")
}
func (UnimplementedSynapsisServiceServer) GetProductCategories(context.Context, *GetProductCategoriesRequest) (*GetProductCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductCategories not implemented")
}
func (UnimplementedSynapsisServiceServer) mustEmbedUnimplementedSynapsisServiceServer() {}

// UnsafeSynapsisServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SynapsisServiceServer will
// result in compilation errors.
type UnsafeSynapsisServiceServer interface {
	mustEmbedUnimplementedSynapsisServiceServer()
}

func RegisterSynapsisServiceServer(s grpc.ServiceRegistrar, srv SynapsisServiceServer) {
	s.RegisterService(&SynapsisService_ServiceDesc, srv)
}

func _SynapsisService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynapsisServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SynapsisService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynapsisServiceServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SynapsisService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynapsisServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SynapsisService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynapsisServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SynapsisService_CreateProductCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynapsisServiceServer).CreateProductCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SynapsisService_CreateProductCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynapsisServiceServer).CreateProductCategory(ctx, req.(*CreateProductCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SynapsisService_GetProductCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynapsisServiceServer).GetProductCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SynapsisService_GetProductCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynapsisServiceServer).GetProductCategory(ctx, req.(*GetProductCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SynapsisService_UpdateProductCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynapsisServiceServer).UpdateProductCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SynapsisService_UpdateProductCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynapsisServiceServer).UpdateProductCategory(ctx, req.(*UpdateProductCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SynapsisService_DeleteProductCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynapsisServiceServer).DeleteProductCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SynapsisService_DeleteProductCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynapsisServiceServer).DeleteProductCategory(ctx, req.(*DeleteProductCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SynapsisService_GetProductCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynapsisServiceServer).GetProductCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SynapsisService_GetProductCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynapsisServiceServer).GetProductCategories(ctx, req.(*GetProductCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SynapsisService_ServiceDesc is the grpc.ServiceDesc for SynapsisService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SynapsisService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "synapsis.v1.SynapsisService",
	HandlerType: (*SynapsisServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _SynapsisService_Ping_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _SynapsisService_CreateUser_Handler,
		},
		{
			MethodName: "CreateProductCategory",
			Handler:    _SynapsisService_CreateProductCategory_Handler,
		},
		{
			MethodName: "GetProductCategory",
			Handler:    _SynapsisService_GetProductCategory_Handler,
		},
		{
			MethodName: "UpdateProductCategory",
			Handler:    _SynapsisService_UpdateProductCategory_Handler,
		},
		{
			MethodName: "DeleteProductCategory",
			Handler:    _SynapsisService_DeleteProductCategory_Handler,
		},
		{
			MethodName: "GetProductCategories",
			Handler:    _SynapsisService_GetProductCategories_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "synapsis/v1/service.proto",
}
